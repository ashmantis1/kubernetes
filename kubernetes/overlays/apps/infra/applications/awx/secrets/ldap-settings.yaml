apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ldap-settings
spec:
  refreshInterval: 15s
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault-backend
  target:
    name: ldap-settings
    template:
      engineVersion: v2
      data:
        custom_ldap_settings.py: |
          AUTH_LDAP_SERVER_URI = "ldaps://ipa01.infra.ashman.world:636 ldaps://ipa02.infra.ashman.world:636 ldaps://ipa03.infra.ashman.world:636"
          AUTH_LDAP_BIND_DN = "uid=svc-awx-bind,cn=users,cn=accounts,dc=infra,dc=ashman,dc=world"
          AUTH_LDAP_BIND_PASSWORD = "{{ .bind_password }}"
          AUTH_LDAP_USER_SEARCH = LDAPSearch(
              "CN=users,CN=accounts,DC=infra,DC=ashman,DC=world",
              ldap.SCOPE_SUBTREE,
              "(uid=%(user)s)",
          )
          AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
              "CN=groups,CN=accounts,DC=infra,DC=ashman,DC=world",
              ldap.SCOPE_SUBTREE,
              "(objectClass=group)",
          )
          AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()
          AUTH_LDAP_USER_ATTR_MAP = {
              "first_name": "givenName",
              "last_name": "sn",
              "email": "mail",
          }
          AUTH_LDAP_REQUIRE_GROUP = ""
          AUTH_LDAP_USER_FLAGS_BY_GROUP = {
              "is_superuser": ["cn=awx-admins,cn=groups,cn=accounts,dc=infra,dc=ashman,dc=world"],
          }
          AUTH_LDAP_ORGANIZATION_MAP = {
              "ashman": {
                  "admins": "cn=awx-admins,cn=groups,cn=accounts,dc=infra,dc=ashman,dc=world",
                  "remove_admins": False,
                  "remove_users": False,
                  "users": True,
              }
          }
          AUTH_LDAP_TEAM_MAP = {
              "admin": {
                  "organization": "ashman",
                  "remove": True,
                  "users": "cn=awx-admins,cn=groups,cn=accounts,dc=infra,dc=ashman,dc=world",
              }
          }
  dataFrom:
  - extract:
      key: k8s/ldap/awx
