# install Container runtime requirements 
- name: Download containerd binaries
  ansible.builtin.shell: curl -L "https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz" --output /tmp/containerd.tar.gz

- name: Extract containerd binaries
  ansible.builtin.shell: tar Cxzvf /usr/local /tmp/containerd.tar.gz 

- name: Download containerd systemd init configuration 
  ansible.builtin.shell: curl "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service" -L --output /usr/local/lib/systemd/system/containerd.service --create-dirs

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes
- name: Enable containerd service
  ansible.builtin.systemd:
    name: containerd
    enabled: yes
- name: Start containerd service
  ansible.builtin.systemd:
    name: containerd
    state: started

- name: Download runc binary
  ansible.builtin.shell: curl -L "https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64" --output /tmp/runc.amd64
- name: Install runc
  ansible.builtin.shell: install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc 

- name: Download CNI plugins
  ansible.builtin.shell: curl -L "https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz" --output /tmp/cni-plugins.tgz
- name: create required directory
  ansible.builtin.shell: mkdir -p /opt/cni/bin
- name: Extract CNI plugins
  ansible.builtin.shell: tar -C /opt/cni/bin -xzvf /tmp/cni-plugins.tgz

- name: Create containerd config 
  ansible.builtin.shell: mkdir -p /etc/containerd && containerd config default > /etc/containerd/config.toml

- name: update containerd config to enable systemd cgroup
  ansible.builtin.shell: sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

- name: restart containerd
  ansible.builtin.systemd:
    name: containerd
    state: restarted
# Container networking prequisites
- name: add networking config to /etc/modules-load.d/k8s.conf
  ansible.builtin.shell: |
      cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
      overlay
      br_netfilter
      EOF
- name: load kernel modules
  ansible.builtin.shell: modprobe overlay && modprobe br_netfilter

- name: enable required sysctl params
  ansible.builtin.shell: | 
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOF
- name: reload sysctl
  ansible.builtin.shell: sysctl --system      